diff --git a/doc/mpfr.texi b/doc/mpfr.texi
index 3ee84640d..a2cc13063 100644
--- a/doc/mpfr.texi
+++ b/doc/mpfr.texi
@@ -5,7 +5,7 @@
 @c Note that the 5 occurrences of the version string in this file
 @c should be updated by the tools/update-version script.
 @set VERSION 4.2.0
-@set UPDATED-MONTH January 2023
+@set UPDATED-MONTH April 2023
 @settitle GNU MPFR @value{VERSION}
 @synindex tp fn
 @iftex
@@ -1577,7 +1577,7 @@ Note that the input 0 is converted to @mm{+}0.
 Set @var{rop} to the value of the string @var{s} in base @var{base},
 rounded in the direction @var{rnd}.
 See the documentation of @code{mpfr_strtofr} for a detailed description
-of the valid string formats.
+of @var{base} (with its special value 0) and the valid string formats.
 Contrary to @code{mpfr_strtofr}, @code{mpfr_set_str} requires the
 @emph{whole} string to represent a valid floating-point number.
 @c Additionally, special values
@@ -2945,7 +2945,7 @@ mpfr_prec_t p;
 mpfr_init (x);
 @dots{}
 p = mpfr_get_prec (x);
-mpfr_printf ("variable x with %Pu bits", p);
+mpfr_printf ("variable x with %Pd bits", p);
 @end example
 
 The @samp{R} type specifies that a following @samp{a}, @samp{A}, @samp{b},
diff --git a/src/acos.c b/src/acos.c
index ce43a7847..1661283c2 100644
--- a/src/acos.c
+++ b/src/acos.c
@@ -34,8 +34,8 @@ mpfr_acos (mpfr_ptr acos, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("acos[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
+     ("acos[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(acos), mpfr_log_prec, acos, inexact));
 
   /* Singular cases */
diff --git a/src/acosh.c b/src/acosh.c
index 21ee49950..648bb5b72 100644
--- a/src/acosh.c
+++ b/src/acosh.c
@@ -34,8 +34,8 @@ mpfr_acosh (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   int comp;
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
      inexact));
 
   /* Deal with special cases */
diff --git a/src/acosu.c b/src/acosu.c
index 73b67f5ec..3f90c247f 100644
--- a/src/acosu.c
+++ b/src/acosu.c
@@ -36,9 +36,9 @@ mpfr_acosu (mpfr_ptr y, mpfr_srcptr x, unsigned long u, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%lu rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, u,
+    (("x[%Pd]=%.*Rg u=%lu rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, u,
       rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   /* Singular cases */
diff --git a/src/add.c b/src/add.c
index bd5866ef5..d3947b7d7 100644
--- a/src/add.c
+++ b/src/add.c
@@ -26,10 +26,10 @@ MPFR_HOT_FUNCTION_ATTR int
 mpfr_add (mpfr_ptr a, mpfr_srcptr b, mpfr_srcptr c, mpfr_rnd_t rnd_mode)
 {
   MPFR_LOG_FUNC
-    (("b[%Pu]=%.*Rg c[%Pu]=%.*Rg rnd=%d",
+    (("b[%Pd]=%.*Rg c[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (b), mpfr_log_prec, b,
       mpfr_get_prec (c), mpfr_log_prec, c, rnd_mode),
-     ("a[%Pu]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
+     ("a[%Pd]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
 
   if (MPFR_ARE_SINGULAR_OR_UBF (b, c))
     {
diff --git a/src/add_d.c b/src/add_d.c
index 7adeb5c53..e245e0eb3 100644
--- a/src/add_d.c
+++ b/src/add_d.c
@@ -32,9 +32,9 @@ mpfr_add_d (mpfr_ptr a, mpfr_srcptr b, double c, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("b[%Pu]=%.*Rg c=%.20g rnd=%d",
+    (("b[%Pd]=%.*Rg c=%.20g rnd=%d",
       mpfr_get_prec(b), mpfr_log_prec, b, c, rnd_mode),
-     ("a[%Pu]=%.*Rg inexact=%d",
+     ("a[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (a), mpfr_log_prec, a, inexact));
 
   MPFR_SAVE_EXPO_MARK (expo);
diff --git a/src/add_ui.c b/src/add_ui.c
index 6fbeed619..2060673f7 100644
--- a/src/add_ui.c
+++ b/src/add_ui.c
@@ -27,9 +27,9 @@ MPFR_HOT_FUNCTION_ATTR int
 mpfr_add_ui (mpfr_ptr y, mpfr_srcptr x, unsigned long int u, mpfr_rnd_t rnd_mode)
 {
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%lu rnd=%d",
+    (("x[%Pd]=%.*Rg u=%lu rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
+     ("y[%Pd]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
 
   /* (unsigned long) 0 is assumed to be a real 0 (unsigned) */
   if (MPFR_UNLIKELY (u == 0))
diff --git a/src/agm.c b/src/agm.c
index 3239ccca6..14fbe6589 100644
--- a/src/agm.c
+++ b/src/agm.c
@@ -39,10 +39,10 @@ mpfr_agm (mpfr_ptr r, mpfr_srcptr op2, mpfr_srcptr op1, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("op2[%Pu]=%.*Rg op1[%Pu]=%.*Rg rnd=%d",
+    (("op2[%Pd]=%.*Rg op1[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (op2), mpfr_log_prec, op2,
       mpfr_get_prec (op1), mpfr_log_prec, op1, rnd_mode),
-     ("r[%Pu]=%.*Rg inexact=%d",
+     ("r[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (r), mpfr_log_prec, r, inexact));
 
   /* Deal with special values */
diff --git a/src/ai.c b/src/ai.c
index aa8e8d91f..4d5221d00 100644
--- a/src/ai.c
+++ b/src/ai.c
@@ -70,8 +70,8 @@ mpfr_ai1 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
 
   /* Logging */
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
-    ("y[%Pu]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y) );
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
+    ("y[%Pd]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y) );
 
   /* Save current exponents range */
   MPFR_SAVE_EXPO_MARK (expo);
@@ -198,7 +198,7 @@ mpfr_ai1 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
   /* ZIV loop */
   for (;;)
     {
-      MPFR_LOG_MSG (("Working precision: %Pu\n", wprec));
+      MPFR_LOG_MSG (("Working precision: %Pd\n", wprec));
       mpfr_set_prec (ti, wprec);
       mpfr_set_prec (tip1, wprec);
       mpfr_set_prec (x3, wprec);
@@ -257,8 +257,8 @@ mpfr_ai1 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
 
       /* err is the number of bits lost due to the evaluation error */
       /* wprec-(prec+1): number of bits lost due to the approximation error */
-      MPFR_LOG_MSG (("Roundoff error: %Pu\n", err));
-      MPFR_LOG_MSG (("Approxim error: %Pu\n", wprec-prec-1));
+      MPFR_LOG_MSG (("Roundoff error: %Pd\n", err));
+      MPFR_LOG_MSG (("Approxim error: %Pd\n", wprec-prec-1));
 
       if (wprec < err + 1)
         correct_bits = 0;
@@ -342,8 +342,8 @@ mpfr_ai2 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
 
   /* Logging */
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x),  mpfr_log_prec, x, rnd),
-    ("y[%Pu]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x),  mpfr_log_prec, x, rnd),
+    ("y[%Pd]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
 
   /* Save current exponents range */
   MPFR_SAVE_EXPO_MARK (expo);
@@ -431,7 +431,7 @@ mpfr_ai2 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
   /* ZIV loop */
   for (;;)
     {
-      MPFR_LOG_MSG (("working precision: %Pu\n", wprec));
+      MPFR_LOG_MSG (("working precision: %Pd\n", wprec));
 
       for (j=0; j<=L; j++)
         mpfr_set_prec (z[j], wprec);
@@ -548,8 +548,8 @@ mpfr_ai2 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
 
       /* err is the number of bits lost due to the evaluation error */
       /* wprec-(prec+1): number of bits lost due to the approximation error */
-      MPFR_LOG_MSG (("Roundoff error: %Pu\n", err));
-      MPFR_LOG_MSG (("Approxim error: %Pu\n", wprec - prec - 1));
+      MPFR_LOG_MSG (("Roundoff error: %Pd\n", err));
+      MPFR_LOG_MSG (("Approxim error: %Pd\n", wprec - prec - 1));
 
       if (wprec < err+1)
         correctBits = 0;
diff --git a/src/asin.c b/src/asin.c
index 29eae21f7..185625139 100644
--- a/src/asin.c
+++ b/src/asin.c
@@ -33,8 +33,8 @@ mpfr_asin (mpfr_ptr asin, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-    ("asin[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (asin), mpfr_log_prec, asin,
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+    ("asin[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (asin), mpfr_log_prec, asin,
      inexact));
 
   /* Special cases */
diff --git a/src/asinh.c b/src/asinh.c
index 831f3fa79..4c9fd30d0 100644
--- a/src/asinh.c
+++ b/src/asinh.c
@@ -38,8 +38,8 @@ mpfr_asinh (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
      inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/asinu.c b/src/asinu.c
index 5c4e968de..09cb66b1e 100644
--- a/src/asinu.c
+++ b/src/asinu.c
@@ -35,9 +35,9 @@ mpfr_asinu (mpfr_ptr y, mpfr_srcptr x, unsigned long u, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%lu rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, u,
+    (("x[%Pd]=%.*Rg u=%lu rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, u,
       rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   /* Singular cases */
diff --git a/src/atan.c b/src/atan.c
index 4220bcbaf..29b75cdb5 100644
--- a/src/atan.c
+++ b/src/atan.c
@@ -298,8 +298,8 @@ mpfr_atan (mpfr_ptr atan, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("atan[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("atan[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (atan), mpfr_log_prec, atan, inexact));
 
   /* Singular cases */
diff --git a/src/atan2.c b/src/atan2.c
index 469c84333..a0bc8c241 100644
--- a/src/atan2.c
+++ b/src/atan2.c
@@ -55,10 +55,10 @@ mpfr_atan2 (mpfr_ptr dest, mpfr_srcptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("y[%Pu]=%.*Rg x[%Pu]=%.*Rg rnd=%d",
+    (("y[%Pd]=%.*Rg x[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (y), mpfr_log_prec, y,
       mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("atan[%Pu]=%.*Rg inexact=%d",
+     ("atan[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (dest), mpfr_log_prec, dest, inexact));
 
   /* Special cases */
diff --git a/src/atan2u.c b/src/atan2u.c
index d5ec829cc..d6147428c 100644
--- a/src/atan2u.c
+++ b/src/atan2u.c
@@ -171,11 +171,11 @@ mpfr_atan2u (mpfr_ptr z, mpfr_srcptr y, mpfr_srcptr x, unsigned long u,
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("y[%Pu]=%.*Rg x[%Pu]=%.*Rg u=%lu rnd=%d",
+    (("y[%Pd]=%.*Rg x[%Pd]=%.*Rg u=%lu rnd=%d",
       mpfr_get_prec(y), mpfr_log_prec, y,
       mpfr_get_prec(x), mpfr_log_prec, x,
       u, rnd_mode),
-     ("z[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (z), mpfr_log_prec, z,
+     ("z[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (z), mpfr_log_prec, z,
       inex));
 
   /* Special cases */
diff --git a/src/atanh.c b/src/atanh.c
index 20cac085b..b832049cf 100644
--- a/src/atanh.c
+++ b/src/atanh.c
@@ -110,8 +110,8 @@ mpfr_atanh (mpfr_ptr y, mpfr_srcptr xt, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
+    ("y[%Pd]=%.*Rg inexact=%d",
      mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   /* Special cases */
diff --git a/src/atanu.c b/src/atanu.c
index 780213c9c..d44c573e1 100644
--- a/src/atanu.c
+++ b/src/atanu.c
@@ -36,9 +36,9 @@ mpfr_atanu (mpfr_ptr y, mpfr_srcptr x, unsigned long u, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%lu rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, u,
+    (("x[%Pd]=%.*Rg u=%lu rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, u,
       rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inex));
 
   /* Singular cases */
diff --git a/src/cbrt.c b/src/cbrt.c
index 11c8e8f48..9de4539a0 100644
--- a/src/cbrt.c
+++ b/src/cbrt.c
@@ -55,8 +55,8 @@ mpfr_cbrt (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
      inexact));
 
   /* special values */
diff --git a/src/compound.c b/src/compound.c
index 16f3b88d2..5580864a3 100644
--- a/src/compound.c
+++ b/src/compound.c
@@ -62,9 +62,9 @@ mpfr_compound_si (mpfr_ptr y, mpfr_srcptr x, long n, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg n=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg n=%ld rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, n, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y, inexact));
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   /* Special cases */
   if (MPFR_IS_SINGULAR (x))
diff --git a/src/const_catalan.c b/src/const_catalan.c
index 2c748c933..c87386603 100644
--- a/src/const_catalan.c
+++ b/src/const_catalan.c
@@ -92,7 +92,7 @@ mpfr_const_catalan_internal (mpfr_ptr g, mpfr_rnd_t rnd_mode)
   MPFR_GROUP_DECL (group);
 
   MPFR_LOG_FUNC (("rnd_mode=%d", rnd_mode),
-    ("g[%Pu]=%.*Rg inex=%d", mpfr_get_prec (g), mpfr_log_prec, g, inex));
+    ("g[%Pd]=%.*Rg inex=%d", mpfr_get_prec (g), mpfr_log_prec, g, inex));
 
   /* Here are the WC (max prec = 100.000.000)
      Once we have found a chain of 11, we only look for bigger chain.
diff --git a/src/const_log2.c b/src/const_log2.c
index 7e29e40fa..64d7a43c3 100644
--- a/src/const_log2.c
+++ b/src/const_log2.c
@@ -121,7 +121,7 @@ mpfr_const_log2_internal (mpfr_ptr x, mpfr_rnd_t rnd_mode)
 
   MPFR_LOG_FUNC (
     ("rnd_mode=%d", rnd_mode),
-    ("x[%Pu]=%.*Rg inex=%d", mpfr_get_prec(x), mpfr_log_prec, x, inexact));
+    ("x[%Pd]=%.*Rg inex=%d", mpfr_get_prec(x), mpfr_log_prec, x, inexact));
 
   w = n + MPFR_INT_CEIL_LOG2 (n) + 3;
 
diff --git a/src/const_pi.c b/src/const_pi.c
index e72e2e11e..a1627a45a 100644
--- a/src/const_pi.c
+++ b/src/const_pi.c
@@ -55,7 +55,7 @@ mpfr_const_pi_internal (mpfr_ptr x, mpfr_rnd_t rnd_mode)
 
   MPFR_LOG_FUNC
     (("rnd_mode=%d", rnd_mode),
-     ("x[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(x), mpfr_log_prec, x, inex));
+     ("x[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(x), mpfr_log_prec, x, inex));
 
   px = MPFR_PREC (x);
 
diff --git a/src/cos.c b/src/cos.c
index b64036873..308242b72 100644
--- a/src/cos.c
+++ b/src/cos.c
@@ -141,8 +141,8 @@ mpfr_cos (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_GROUP_DECL (group);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
      inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/cosh.c b/src/cosh.c
index 9341b170b..c5dbc33a4 100644
--- a/src/cosh.c
+++ b/src/cosh.c
@@ -34,8 +34,8 @@ mpfr_cosh (mpfr_ptr y, mpfr_srcptr xt, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
      inexact));
 
   if (MPFR_UNLIKELY(MPFR_IS_SINGULAR(xt)))
diff --git a/src/cosu.c b/src/cosu.c
index 97ecfaa75..b318e7680 100644
--- a/src/cosu.c
+++ b/src/cosu.c
@@ -37,9 +37,9 @@ mpfr_cosu (mpfr_ptr y, mpfr_srcptr x, unsigned long u, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg u=%lu rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, u,
+    ("x[%Pd]=%.*Rg u=%lu rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, u,
      rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
      inexact));
 
   if (u == 0 || MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/d_div.c b/src/d_div.c
index 9a0600ccb..9afa7e2dd 100644
--- a/src/d_div.c
+++ b/src/d_div.c
@@ -32,8 +32,8 @@ mpfr_d_div (mpfr_ptr a, double b, mpfr_srcptr c, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("b=%.20g c[%Pu]=%.*Rg rnd=%d", b, mpfr_get_prec (c), mpfr_log_prec, c, rnd_mode),
-    ("a[%Pu]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
+    ("b=%.20g c[%Pd]=%.*Rg rnd=%d", b, mpfr_get_prec (c), mpfr_log_prec, c, rnd_mode),
+    ("a[%Pd]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
 
   MPFR_SAVE_EXPO_MARK (expo);
 
diff --git a/src/d_sub.c b/src/d_sub.c
index 4496ab907..41e330937 100644
--- a/src/d_sub.c
+++ b/src/d_sub.c
@@ -32,8 +32,8 @@ mpfr_d_sub (mpfr_ptr a, double b, mpfr_srcptr c, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("b=%.20g c[%Pu]=%.*Rg rnd=%d", b, mpfr_get_prec (c), mpfr_log_prec, c, rnd_mode),
-    ("a[%Pu]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
+    ("b=%.20g c[%Pd]=%.*Rg rnd=%d", b, mpfr_get_prec (c), mpfr_log_prec, c, rnd_mode),
+    ("a[%Pd]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
 
   MPFR_SAVE_EXPO_MARK (expo);
 
diff --git a/src/digamma.c b/src/digamma.c
index 6cb7ec8d8..92c604be4 100644
--- a/src/digamma.c
+++ b/src/digamma.c
@@ -122,8 +122,8 @@ mpfr_digamma_reflection (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y, inex));
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y, inex));
 
   /* we want that 1-x is exact with precision q: if 0 < x < 1/2, then
      q = PREC(x)-EXP(x) is ok, otherwise if -1 <= x < 0, q = PREC(x)-EXP(x)
@@ -214,8 +214,8 @@ mpfr_digamma_positive (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y, inex));
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y, inex));
 
   /* For very large x, use |digamma(x) - log(x)| < 1/x < 2^(1-EXP(x)).
      However, for a fixed value of GUARD, MPFR_CAN_ROUND() might fail
@@ -259,7 +259,7 @@ mpfr_digamma_positive (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
     q = MPFR_PREC(x) + 1;
 
   /* FIXME: q can be much too large, e.g. equal to the maximum exponent! */
-  MPFR_LOG_MSG (("q=%Pu\n", q));
+  MPFR_LOG_MSG (("q=%Pd\n", q));
 
   mpfr_init2 (x_plus_j, q);
 
@@ -338,8 +338,8 @@ mpfr_digamma (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y, inex));
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y, inex));
 
   if (MPFR_UNLIKELY(MPFR_IS_SINGULAR(x)))
     {
diff --git a/src/div.c b/src/div.c
index 28426c483..3f90fac32 100644
--- a/src/div.c
+++ b/src/div.c
@@ -770,10 +770,10 @@ mpfr_div (mpfr_ptr q, mpfr_srcptr u, mpfr_srcptr v, mpfr_rnd_t rnd_mode)
   MPFR_TMP_DECL(marker);
 
   MPFR_LOG_FUNC (
-    ("u[%Pu]=%.*Rg v[%Pu]=%.*Rg rnd=%d",
+    ("u[%Pd]=%.*Rg v[%Pd]=%.*Rg rnd=%d",
      mpfr_get_prec(u), mpfr_log_prec, u,
      mpfr_get_prec (v),mpfr_log_prec, v, rnd_mode),
-    ("q[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(q), mpfr_log_prec, q, inex));
+    ("q[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(q), mpfr_log_prec, q, inex));
 
   /**************************************************************************
    *                                                                        *
diff --git a/src/div_2si.c b/src/div_2si.c
index ae584a409..a31e066ae 100644
--- a/src/div_2si.c
+++ b/src/div_2si.c
@@ -28,9 +28,9 @@ mpfr_div_2si (mpfr_ptr y, mpfr_srcptr x, long int n, mpfr_rnd_t rnd_mode)
   int inexact;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg n=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg n=%ld rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, n, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/div_2ui.c b/src/div_2ui.c
index 7dac999b0..112995048 100644
--- a/src/div_2ui.c
+++ b/src/div_2ui.c
@@ -28,9 +28,9 @@ mpfr_div_2ui (mpfr_ptr y, mpfr_srcptr x, unsigned long n, mpfr_rnd_t rnd_mode)
   int inexact;
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg n=%lu rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, n,
+    ("x[%Pd]=%.*Rg n=%lu rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, n,
      rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y, inexact));
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY (n == 0 || MPFR_IS_SINGULAR (x)))
     return mpfr_set (y, x, rnd_mode);
diff --git a/src/div_d.c b/src/div_d.c
index f5fdf9b67..de84a88fb 100644
--- a/src/div_d.c
+++ b/src/div_d.c
@@ -32,9 +32,9 @@ mpfr_div_d (mpfr_ptr a, mpfr_srcptr b, double c, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("b[%Pu]=%.*Rg c%.20g rnd=%d", mpfr_get_prec (b), mpfr_log_prec, b, c,
+    ("b[%Pd]=%.*Rg c%.20g rnd=%d", mpfr_get_prec (b), mpfr_log_prec, b, c,
      rnd_mode),
-    ("a[%Pu]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
+    ("a[%Pd]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
 
   MPFR_SAVE_EXPO_MARK (expo);
 
diff --git a/src/div_ui.c b/src/div_ui.c
index 4e051ea1f..85303ac84 100644
--- a/src/div_ui.c
+++ b/src/div_ui.c
@@ -46,9 +46,9 @@ mpfr_div_ui (mpfr_ptr y, mpfr_srcptr x, unsigned long int u,
   MPFR_TMP_DECL(marker);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%lu rnd=%d",
+    (("x[%Pd]=%.*Rg u=%lu rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/eint.c b/src/eint.c
index f9eb54f29..2c35c498e 100644
--- a/src/eint.c
+++ b/src/eint.c
@@ -47,8 +47,8 @@ mpfr_eint_aux (mpfr_ptr y, mpfr_srcptr x)
   MPFR_GROUP_DECL (group);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg", mpfr_get_prec (x), mpfr_log_prec, x),
-    ("y[%Pu]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
+    ("x[%Pd]=%.*Rg", mpfr_get_prec (x), mpfr_log_prec, x),
+    ("y[%Pd]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
 
   /* for |x| <= 1, we have S := sum(x^k/k/k!, k=1..infinity) = x + R(x)
      where |R(x)| <= (x/2)^2/(1-|x|/2) <= 2*(x/2)^2
@@ -182,7 +182,7 @@ mpfr_eint_asympt (mpfr_ptr y, mpfr_srcptr x)
   mpfr_exp_t err_exp;
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg", mpfr_get_prec (x), mpfr_log_prec, x),
+    ("x[%Pd]=%.*Rg", mpfr_get_prec (x), mpfr_log_prec, x),
     ("err_exp=%" MPFR_EXP_FSPEC "d", (mpfr_eexp_t) err_exp));
 
   mpfr_init2 (t, p);
@@ -232,8 +232,8 @@ mpfr_eint (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y, inex));
+    ("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y, inex));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
     {
diff --git a/src/erf.c b/src/erf.c
index b0d820ed5..c62cf1dbf 100644
--- a/src/erf.c
+++ b/src/erf.c
@@ -34,8 +34,8 @@ mpfr_erf (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y, inex));
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y, inex));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
     {
diff --git a/src/erfc.c b/src/erfc.c
index b2db6a9e1..1dbc2305c 100644
--- a/src/erfc.c
+++ b/src/erfc.c
@@ -132,8 +132,8 @@ mpfr_erfc (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y, inex));
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y, inex));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
     {
diff --git a/src/exceptions.c b/src/exceptions.c
index 800d9936a..82b224e3c 100644
--- a/src/exceptions.c
+++ b/src/exceptions.c
@@ -384,7 +384,7 @@ mpfr_underflow (mpfr_ptr x, mpfr_rnd_t rnd_mode, int sign)
 
   MPFR_LOG_FUNC
     (("rnd=%d sign=%d", rnd_mode, sign),
-     ("x[%Pu]=%.*Rg", mpfr_get_prec (x), mpfr_log_prec, x));
+     ("x[%Pd]=%.*Rg", mpfr_get_prec (x), mpfr_log_prec, x));
 
   MPFR_ASSERT_SIGN (sign);
 
@@ -412,7 +412,7 @@ mpfr_overflow (mpfr_ptr x, mpfr_rnd_t rnd_mode, int sign)
 
   MPFR_LOG_FUNC
     (("rnd=%d sign=%d", rnd_mode, sign),
-     ("x[%Pu]=%.*Rg", mpfr_get_prec (x), mpfr_log_prec, x));
+     ("x[%Pd]=%.*Rg", mpfr_get_prec (x), mpfr_log_prec, x));
 
   MPFR_ASSERT_SIGN (sign);
 
diff --git a/src/exp.c b/src/exp.c
index de57dcddd..ff5eea865 100644
--- a/src/exp.c
+++ b/src/exp.c
@@ -41,8 +41,8 @@ mpfr_exp (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY( MPFR_IS_SINGULAR(x) ))
diff --git a/src/exp10m1.c b/src/exp10m1.c
index 42eb215b3..1234621ee 100644
--- a/src/exp10m1.c
+++ b/src/exp10m1.c
@@ -69,8 +69,8 @@ mpfr_exp10m1 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   if (MPFR_IS_SINGULAR (x))
diff --git a/src/exp2.c b/src/exp2.c
index b64546bb3..25aa005dc 100644
--- a/src/exp2.c
+++ b/src/exp2.c
@@ -52,8 +52,8 @@ mpfr_exp2 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y,
       inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/exp2m1.c b/src/exp2m1.c
index 4dc4221bd..025df6f14 100644
--- a/src/exp2m1.c
+++ b/src/exp2m1.c
@@ -74,8 +74,8 @@ mpfr_exp2m1 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   if (MPFR_IS_SINGULAR (x))
diff --git a/src/exp3.c b/src/exp3.c
index 890d7e900..04d5b11c4 100644
--- a/src/exp3.c
+++ b/src/exp3.c
@@ -171,8 +171,8 @@ mpfr_exp_3 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (ziv_loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y,
       inexact));
 
   MPFR_SAVE_EXPO_MARK (expo);
diff --git a/src/exp_2.c b/src/exp_2.c
index b59ad02be..203931497 100644
--- a/src/exp_2.c
+++ b/src/exp_2.c
@@ -87,8 +87,8 @@ mpfr_exp_2 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec(y), mpfr_log_prec, y,
       inexact));
 
   expx = MPFR_GET_EXP (x);
diff --git a/src/expm1.c b/src/expm1.c
index a8b8d5a53..ec265416f 100644
--- a/src/expm1.c
+++ b/src/expm1.c
@@ -35,8 +35,8 @@ mpfr_expm1 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/fma.c b/src/fma.c
index 5ea26adda..d9c6ded6d 100644
--- a/src/fma.c
+++ b/src/fma.c
@@ -109,11 +109,11 @@ mpfr_fma (mpfr_ptr s, mpfr_srcptr x, mpfr_srcptr y, mpfr_srcptr z,
   MPFR_GROUP_DECL(group);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg y[%Pu]=%.*Rg  z[%Pu]=%.*Rg rnd=%d",
+    (("x[%Pd]=%.*Rg y[%Pd]=%.*Rg  z[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x,
       mpfr_get_prec (y), mpfr_log_prec, y,
       mpfr_get_prec (z), mpfr_log_prec, z, rnd_mode),
-     ("s[%Pu]=%.*Rg inexact=%d",
+     ("s[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (s), mpfr_log_prec, s, inexact));
 
   /* particular cases */
diff --git a/src/fmma.c b/src/fmma.c
index f697a9094..0d07f2056 100644
--- a/src/fmma.c
+++ b/src/fmma.c
@@ -36,12 +36,12 @@ mpfr_fmma_aux (mpfr_ptr z, mpfr_srcptr a, mpfr_srcptr b, mpfr_srcptr c,
   MPFR_TMP_DECL(marker);
 
   MPFR_LOG_FUNC
-    (("a[%Pu]=%.*Rg b[%Pu]=%.*Rg c[%Pu]=%.*Rg d[%Pu]=%.*Rg rnd=%d neg=%d",
+    (("a[%Pd]=%.*Rg b[%Pd]=%.*Rg c[%Pd]=%.*Rg d[%Pd]=%.*Rg rnd=%d neg=%d",
       mpfr_get_prec (a), mpfr_log_prec, a,
       mpfr_get_prec (b), mpfr_log_prec, b,
       mpfr_get_prec (c), mpfr_log_prec, c,
       mpfr_get_prec (d), mpfr_log_prec, d, rnd, neg),
-     ("z[%Pu]=%.*Rg inex=%d",
+     ("z[%Pd]=%.*Rg inex=%d",
       mpfr_get_prec (z), mpfr_log_prec, z, inex));
 
   MPFR_TMP_MARK (marker);
diff --git a/src/fmod_ui.c b/src/fmod_ui.c
index f1e2fa183..769842766 100644
--- a/src/fmod_ui.c
+++ b/src/fmod_ui.c
@@ -29,9 +29,9 @@ mpfr_fmod_ui (mpfr_ptr r, mpfr_srcptr x, unsigned long u, mpfr_rnd_t rnd_mode)
   int inex;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%lu rnd=%d",
+    (("x[%Pd]=%.*Rg u=%lu rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(r), mpfr_log_prec, r, inex));
 
   if (MPFR_UNLIKELY (u != 0))
diff --git a/src/frexp.c b/src/frexp.c
index e4e8cecd3..a9ae5f3f7 100644
--- a/src/frexp.c
+++ b/src/frexp.c
@@ -30,8 +30,8 @@ mpfr_frexp (mpfr_exp_t *exp, mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
   MPFR_BLOCK_DECL (flags);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
-     ("y[%Pu]=%.*Rg exp=%" MPFR_EXP_FSPEC "d inex=%d", mpfr_get_prec (y),
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
+     ("y[%Pd]=%.*Rg exp=%" MPFR_EXP_FSPEC "d inex=%d", mpfr_get_prec (y),
       mpfr_log_prec, y, (mpfr_eexp_t) *exp, inex));
 
   if (MPFR_UNLIKELY(MPFR_IS_SINGULAR(x)))
diff --git a/src/gamma.c b/src/gamma.c
index f18eb68d3..f8b2bdc48 100644
--- a/src/gamma.c
+++ b/src/gamma.c
@@ -122,8 +122,8 @@ mpfr_gamma (mpfr_ptr gamma, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("gamma[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("gamma[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (gamma), mpfr_log_prec, gamma, inex));
 
   /* Trivial cases */
diff --git a/src/get_str.c b/src/get_str.c
index f62df89e9..af62651b6 100644
--- a/src/get_str.c
+++ b/src/get_str.c
@@ -2605,7 +2605,7 @@ mpfr_get_str (char *s, mpfr_exp_t *e, int b, size_t m, mpfr_srcptr x,
   /* otherwise err is such that |x*b^(m-g)-a*2^exp_a| < 2^(err+exp_a) */
 
   MPFR_LOG_FUNC
-    (("b=%d m=%zu x[%Pu]=%.*Rg rnd=%d",
+    (("b=%d m=%zu x[%Pd]=%.*Rg rnd=%d",
       b, m, mpfr_get_prec (x), mpfr_log_prec, x, rnd),
      ("flags=%lx", (unsigned long) __gmpfr_flags));
 
diff --git a/src/hypot.c b/src/hypot.c
index 0d0ba0aae..726c0d332 100644
--- a/src/hypot.c
+++ b/src/hypot.c
@@ -43,10 +43,10 @@ mpfr_hypot (mpfr_ptr z, mpfr_srcptr x, mpfr_srcptr y, mpfr_rnd_t rnd_mode)
   MPFR_BLOCK_DECL (flags);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg y[%Pu]=%.*Rg rnd=%d",
+    (("x[%Pd]=%.*Rg y[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x,
       mpfr_get_prec (y), mpfr_log_prec, y, rnd_mode),
-     ("z[%Pu]=%.*Rg inexact=%d",
+     ("z[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (z), mpfr_log_prec, z, inexact));
 
   /* particular cases */
diff --git a/src/jn.c b/src/jn.c
index 5a92f9cee..459b10420 100644
--- a/src/jn.c
+++ b/src/jn.c
@@ -95,8 +95,8 @@ mpfr_jn (mpfr_ptr res, long n, mpfr_srcptr z, mpfr_rnd_t r)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("n=%d x[%Pu]=%.*Rg rnd=%d", n, mpfr_get_prec (z), mpfr_log_prec, z, r),
-     ("res[%Pu]=%.*Rg inexact=%d",
+    (("n=%d x[%Pd]=%.*Rg rnd=%d", n, mpfr_get_prec (z), mpfr_log_prec, z, r),
+     ("res[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (res), mpfr_log_prec, res, inex));
 
   absn = SAFE_ABS (unsigned long, n);
diff --git a/src/li2.c b/src/li2.c
index 901894e47..91f23283a 100644
--- a/src/li2.c
+++ b/src/li2.c
@@ -221,8 +221,8 @@ mpfr_li2 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/lngamma.c b/src/lngamma.c
index b68044a01..7e89e92a3 100644
--- a/src/lngamma.c
+++ b/src/lngamma.c
@@ -34,8 +34,8 @@ static void
 mpfr_gamma_alpha (mpfr_ptr s, mpfr_prec_t p)
 {
   MPFR_LOG_FUNC
-    (("p=%Pu", p),
-     ("s[%Pu]=%.*Rg", mpfr_get_prec (s), mpfr_log_prec, s));
+    (("p=%Pd", p),
+     ("s[%Pd]=%.*Rg", mpfr_get_prec (s), mpfr_log_prec, s));
 
   if (p <= 100)
     mpfr_set_ui_2exp (s, 614, -10, MPFR_RNDN); /* about 0.6 */
@@ -179,8 +179,8 @@ GAMMA_FUNC (mpfr_ptr y, mpfr_srcptr z0, mpfr_rnd_t rnd)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (z0), mpfr_log_prec, z0, rnd),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (z0), mpfr_log_prec, z0, rnd),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   compared = mpfr_cmp_ui (z0, 1);
@@ -723,8 +723,8 @@ mpfr_lngamma (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd)
   int inex;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inex));
 
   /* special cases */
@@ -763,8 +763,8 @@ mpfr_lgamma (mpfr_ptr y, int *signp, mpfr_srcptr x, mpfr_rnd_t rnd)
   int inex;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
-     ("y[%Pu]=%.*Rg signp=%d inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd),
+     ("y[%Pd]=%.*Rg signp=%d inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, *signp, inex));
 
   *signp = 1;  /* most common case */
diff --git a/src/log.c b/src/log.c
index 677fcc3d6..8f0016741 100644
--- a/src/log.c
+++ b/src/log.c
@@ -50,8 +50,8 @@ mpfr_log (mpfr_ptr r, mpfr_srcptr a, mpfr_rnd_t rnd_mode)
   MPFR_GROUP_DECL(group);
 
   MPFR_LOG_FUNC
-    (("a[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (a), mpfr_log_prec, a, rnd_mode),
-     ("r[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (r), mpfr_log_prec, r,
+    (("a[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (a), mpfr_log_prec, a, rnd_mode),
+     ("r[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (r), mpfr_log_prec, r,
       inexact));
 
   /* Special cases */
diff --git a/src/log10.c b/src/log10.c
index a045ef155..ba2a6b7a0 100644
--- a/src/log10.c
+++ b/src/log10.c
@@ -35,8 +35,8 @@ mpfr_log10 (mpfr_ptr r, mpfr_srcptr a, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("a[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (a), mpfr_log_prec, a, rnd_mode),
-     ("r[%Pu]=%.*Rg inexact=%d",
+    (("a[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (a), mpfr_log_prec, a, rnd_mode),
+     ("r[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (r), mpfr_log_prec, r, inexact));
 
   /* If a is NaN, the result is NaN */
diff --git a/src/log10p1.c b/src/log10p1.c
index 01856442c..811cece92 100644
--- a/src/log10p1.c
+++ b/src/log10p1.c
@@ -129,8 +129,8 @@ mpfr_log10p1 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/log1p.c b/src/log1p.c
index 87f35e07c..7f26e66d3 100644
--- a/src/log1p.c
+++ b/src/log1p.c
@@ -106,8 +106,8 @@ mpfr_log1p (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/log2.c b/src/log2.c
index 310ec9852..56b3a2f2c 100644
--- a/src/log2.c
+++ b/src/log2.c
@@ -33,8 +33,8 @@ mpfr_log2 (mpfr_ptr r, mpfr_srcptr a, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("a[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (a), mpfr_log_prec, a, rnd_mode),
-     ("r[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (r), mpfr_log_prec, r,
+    (("a[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (a), mpfr_log_prec, a, rnd_mode),
+     ("r[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (r), mpfr_log_prec, r,
       inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (a)))
diff --git a/src/log2p1.c b/src/log2p1.c
index ac0bdd617..20a9c663f 100644
--- a/src/log2p1.c
+++ b/src/log2p1.c
@@ -89,8 +89,8 @@ mpfr_log2p1 (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/modf.c b/src/modf.c
index 5f1377bb3..fc4f6a0e3 100644
--- a/src/modf.c
+++ b/src/modf.c
@@ -31,9 +31,9 @@ mpfr_modf (mpfr_ptr iop, mpfr_ptr fop, mpfr_srcptr op, mpfr_rnd_t rnd_mode)
   int inexi, inexf;
 
   MPFR_LOG_FUNC
-    (("op[%Pu]=%.*Rg rnd=%d",
+    (("op[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (op), mpfr_log_prec, op, rnd_mode),
-     ("iop[%Pu]=%.*Rg fop[%Pu]=%.*Rg",
+     ("iop[%Pd]=%.*Rg fop[%Pd]=%.*Rg",
       mpfr_get_prec (iop), mpfr_log_prec, iop,
       mpfr_get_prec (fop), mpfr_log_prec, fop));
 
diff --git a/src/mpfr-impl.h b/src/mpfr-impl.h
index 613e8c1cf..5019ca68b 100644
--- a/src/mpfr-impl.h
+++ b/src/mpfr-impl.h
@@ -2194,7 +2194,7 @@ __MPFR_DECLSPEC extern mpfr_prec_t mpfr_log_prec;
   while (0)
 
 #define MPFR_LOG_VAR(x)                                                 \
-  LOG_PRINT (MPFR_LOG_INTERNAL_F, "%s.%d:%s[%#Pu]=%.*Rg\n", __func__,   \
+  LOG_PRINT (MPFR_LOG_INTERNAL_F, "%s.%d:%s[%#Pd]=%.*Rg\n", __func__,   \
              (int) __LINE__, #x, mpfr_get_prec (x), mpfr_log_prec, x)
 
 #define MPFR_LOG_MSG2(format, ...)                                      \
diff --git a/src/mpfr-thread.h b/src/mpfr-thread.h
index a3099b0d9..344f1e43b 100644
--- a/src/mpfr-thread.h
+++ b/src/mpfr-thread.h
@@ -64,10 +64,13 @@ https://www.gnu.org/licenses/ or write to the Free Software Foundation, Inc.,
 #define MPFR_LOCK_DECL(_lock)                   \
   mtx_t _lock;
 
-#define MPFR_LOCK_C(E)                          \
-  do {                                          \
-    if ((E) != thrd_success)                    \
-      abort ();                                 \
+#define MPFR_LOCK_C(E)                                  \
+  do {                                                  \
+    if ((E) != thrd_success)                            \
+      {                                                 \
+        fprintf (stderr, "MPFR lock failure\n");        \
+        abort ();                                       \
+      }                                                 \
   } while (0)
 
 #define MPFR_LOCK_INIT(_lock)    MPFR_LOCK_C(mtx_init(&(_lock), mtx_plain))
@@ -107,10 +110,13 @@ https://www.gnu.org/licenses/ or write to the Free Software Foundation, Inc.,
 #define MPFR_LOCK_DECL(_lock)                   \
   pthread_rwlock_t _lock;
 
-#define MPFR_LOCK_C(E)                          \
-  do {                                          \
-    if ((E) != 0)                               \
-      abort ();                                 \
+#define MPFR_LOCK_C(E)                                  \
+  do {                                                  \
+    if ((E) != 0)                                       \
+      {                                                 \
+        fprintf (stderr, "MPFR lock failure\n");        \
+        abort ();                                       \
+      }                                                 \
   } while (0)
 
 #define MPFR_LOCK_INIT(_lock) MPFR_LOCK_C(pthread_rwlock_init(&(_lock), NULL))
diff --git a/src/mul.c b/src/mul.c
index 6f319040b..fef4a8800 100644
--- a/src/mul.c
+++ b/src/mul.c
@@ -740,10 +740,10 @@ mpfr_mul (mpfr_ptr a, mpfr_srcptr b, mpfr_srcptr c, mpfr_rnd_t rnd_mode)
   MPFR_TMP_DECL (marker);
 
   MPFR_LOG_FUNC
-    (("b[%Pu]=%.*Rg c[%Pu]=%.*Rg rnd=%d",
+    (("b[%Pd]=%.*Rg c[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (b), mpfr_log_prec, b,
       mpfr_get_prec (c), mpfr_log_prec, c, rnd_mode),
-     ("a[%Pu]=%.*Rg inexact=%d",
+     ("a[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (a), mpfr_log_prec, a, inexact));
 
   /* deal with special cases */
diff --git a/src/mul_2si.c b/src/mul_2si.c
index 7d0038c74..eb322f480 100644
--- a/src/mul_2si.c
+++ b/src/mul_2si.c
@@ -28,9 +28,9 @@ mpfr_mul_2si (mpfr_ptr y, mpfr_srcptr x, long int n, mpfr_rnd_t rnd_mode)
   int inexact;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg n=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg n=%ld rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, n, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/mul_2ui.c b/src/mul_2ui.c
index b76f85797..8cf64fd64 100644
--- a/src/mul_2ui.c
+++ b/src/mul_2ui.c
@@ -28,9 +28,9 @@ mpfr_mul_2ui (mpfr_ptr y, mpfr_srcptr x, unsigned long int n, mpfr_rnd_t rnd_mod
   int inexact;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg n=%lu rnd=%d",
+    (("x[%Pd]=%.*Rg n=%lu rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, n, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   inexact = (y != x) ? mpfr_set (y, x, rnd_mode) : 0;
diff --git a/src/mul_d.c b/src/mul_d.c
index e0fe1e7e9..257a43909 100644
--- a/src/mul_d.c
+++ b/src/mul_d.c
@@ -32,9 +32,9 @@ mpfr_mul_d (mpfr_ptr a, mpfr_srcptr b, double c, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("b[%Pu]=%.*Rg c=%.20g rnd=%d",
+    (("b[%Pd]=%.*Rg c=%.20g rnd=%d",
       mpfr_get_prec(b), mpfr_log_prec, b, c, rnd_mode),
-     ("a[%Pu]=%.*Rg inexact=%d",
+     ("a[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (a), mpfr_log_prec, a, inexact));
 
   MPFR_SAVE_EXPO_MARK (expo);
diff --git a/src/pow.c b/src/pow.c
index a7ba3ee1f..e863e6f63 100644
--- a/src/pow.c
+++ b/src/pow.c
@@ -135,10 +135,10 @@ mpfr_pow_general (mpfr_ptr z, mpfr_srcptr x, mpfr_srcptr y,
   MPFR_ZIV_DECL (ziv_loop);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg y[%Pu]=%.*Rg rnd=%d",
+    (("x[%Pd]=%.*Rg y[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x,
       mpfr_get_prec (y), mpfr_log_prec, y, rnd_mode),
-     ("z[%Pu]=%.*Rg inexact=%d",
+     ("z[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (z), mpfr_log_prec, z, inexact));
 
   /* We put the absolute value of x in absx, pointing to the significand
@@ -385,10 +385,10 @@ mpfr_pow (mpfr_ptr z, mpfr_srcptr x, mpfr_srcptr y, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg y[%Pu]=%.*Rg rnd=%d",
+    (("x[%Pd]=%.*Rg y[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x,
       mpfr_get_prec (y), mpfr_log_prec, y, rnd_mode),
-     ("z[%Pu]=%.*Rg inexact=%d",
+     ("z[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (z), mpfr_log_prec, z, inexact));
 
   if (MPFR_ARE_SINGULAR (x, y))
diff --git a/src/pow_si.c b/src/pow_si.c
index 22cda32e1..c1f522f57 100644
--- a/src/pow_si.c
+++ b/src/pow_si.c
@@ -43,9 +43,9 @@ int
 POW_S (mpfr_ptr y, mpfr_srcptr x, TYPE n, mpfr_rnd_t rnd)
 {
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg n=%" FSPEC "d rnd=%d",
+    (("x[%Pd]=%.*Rg n=%" FSPEC "d rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, n, rnd),
-     ("y[%Pu]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
+     ("y[%Pd]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
 
   if (n >= 0)
     return POW_U (y, x, n, rnd);
diff --git a/src/pow_ui.c b/src/pow_ui.c
index b59399135..d82e68ffd 100644
--- a/src/pow_ui.c
+++ b/src/pow_ui.c
@@ -44,9 +44,9 @@ POW_U (mpfr_ptr y, mpfr_srcptr x, UTYPE n, mpfr_rnd_t rnd)
   MPFR_BLOCK_DECL (flags);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg n=%" FSPEC "u rnd=%d",
+    (("x[%Pd]=%.*Rg n=%" FSPEC "u rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, n, rnd),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   /* x^0 = 1 for any x, even a NaN */
diff --git a/src/pow_z.c b/src/pow_z.c
index 2388ed081..6f930ac12 100644
--- a/src/pow_z.c
+++ b/src/pow_z.c
@@ -41,9 +41,9 @@ mpfr_pow_pos_z (mpfr_ptr y, mpfr_srcptr x, mpz_srcptr z, mpfr_rnd_t rnd, int cr)
   MPFR_BLOCK_DECL (flags);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg z=%Zd rnd=%d cr=%d",
+    (("x[%Pd]=%.*Rg z=%Zd rnd=%d cr=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, z, rnd, cr),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   MPFR_ASSERTD (mpz_sgn (z) != 0);
@@ -171,9 +171,9 @@ mpfr_pow_z (mpfr_ptr y, mpfr_srcptr x, mpz_srcptr z, mpfr_rnd_t rnd)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg z=%Zd rnd=%d",
+    (("x[%Pd]=%.*Rg z=%Zd rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, z, rnd),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   /* x^0 = 1 for any x, even a NaN */
diff --git a/src/rec_sqrt.c b/src/rec_sqrt.c
index c6ca40ba1..5a5d08616 100644
--- a/src/rec_sqrt.c
+++ b/src/rec_sqrt.c
@@ -465,8 +465,8 @@ mpfr_rec_sqrt (mpfr_ptr r, mpfr_srcptr u, mpfr_rnd_t rnd_mode)
   MPFR_TMP_DECL(marker);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (u), mpfr_log_prec, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (r), mpfr_log_prec, r, inex));
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (u), mpfr_log_prec, u, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (r), mpfr_log_prec, r, inex));
 
   /* special values */
   if (MPFR_UNLIKELY(MPFR_IS_SINGULAR(u)))
diff --git a/src/root.c b/src/root.c
index 386846ad2..e2e3a599d 100644
--- a/src/root.c
+++ b/src/root.c
@@ -54,9 +54,9 @@ mpfr_rootn_ui (mpfr_ptr y, mpfr_srcptr x, unsigned long k, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg k=%lu rnd=%d",
+    (("x[%Pd]=%.*Rg k=%lu rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, k, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY (k <= 1))
@@ -306,9 +306,9 @@ mpfr_rootn_si (mpfr_ptr y, mpfr_srcptr x, long k, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg k=%lu rnd=%d",
+    (("x[%Pd]=%.*Rg k=%lu rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, k, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   if (k >= 0)
@@ -441,9 +441,9 @@ int
 mpfr_root (mpfr_ptr y, mpfr_srcptr x, unsigned long k, mpfr_rnd_t rnd_mode)
 {
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg k=%lu rnd=%d",
+    (("x[%Pd]=%.*Rg k=%lu rnd=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, k, rnd_mode),
-     ("y[%Pu]=%.*Rg",
+     ("y[%Pd]=%.*Rg",
       mpfr_get_prec (y), mpfr_log_prec, y));
 
   /* Like mpfr_rootn_ui... */
diff --git a/src/set_prec.c b/src/set_prec.c
index 54d610d67..d673bea45 100644
--- a/src/set_prec.c
+++ b/src/set_prec.c
@@ -27,7 +27,7 @@ mpfr_set_prec (mpfr_ptr x, mpfr_prec_t p)
 {
   mp_size_t xsize, xoldsize;
 
-  MPFR_LOG_MSG (("prec=%Pu\n", p));
+  MPFR_LOG_MSG (("prec=%Pd\n", p));
 
   /* first, check if p is correct */
   MPFR_ASSERTN (MPFR_PREC_COND (p));
diff --git a/src/si_op.c b/src/si_op.c
index 71fa91fcf..3925a3665 100644
--- a/src/si_op.c
+++ b/src/si_op.c
@@ -33,9 +33,9 @@ mpfr_add_si (mpfr_ptr y, mpfr_srcptr x, long int u, mpfr_rnd_t rnd_mode)
   int res;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg u=%ld rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(y), mpfr_log_prec, y, res));
 
   if (u >= 0)
@@ -52,9 +52,9 @@ mpfr_sub_si (mpfr_ptr y, mpfr_srcptr x, long int u, mpfr_rnd_t rnd_mode)
   int res;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg u=%ld rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(y), mpfr_log_prec, y, res));
 
   if (u >= 0)
@@ -71,9 +71,9 @@ mpfr_si_sub (mpfr_ptr y, long int u, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   int res;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg u=%ld rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(y), mpfr_log_prec, y, res));
 
   if (u >= 0)
@@ -95,9 +95,9 @@ mpfr_mul_si (mpfr_ptr y, mpfr_srcptr x, long int u, mpfr_rnd_t rnd_mode)
   int res;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg u=%ld rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(y), mpfr_log_prec, y, res));
 
   if (u >= 0)
@@ -119,9 +119,9 @@ mpfr_div_si (mpfr_ptr y, mpfr_srcptr x, long int u, mpfr_rnd_t rnd_mode)
   int res;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg u=%ld rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(y), mpfr_log_prec, y, res));
 
   if (u >= 0)
@@ -142,9 +142,9 @@ mpfr_si_div (mpfr_ptr y, long int u, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   int res;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%ld rnd=%d",
+    (("x[%Pd]=%.*Rg u=%ld rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(y), mpfr_log_prec, y, res));
 
   if (u >= 0)
diff --git a/src/sin.c b/src/sin.c
index 7b4252e6d..82d78f72d 100644
--- a/src/sin.c
+++ b/src/sin.c
@@ -45,8 +45,8 @@ mpfr_sin (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
       inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/sin_cos.c b/src/sin_cos.c
index 396075963..034ed9802 100644
--- a/src/sin_cos.c
+++ b/src/sin_cos.c
@@ -61,8 +61,8 @@ mpfr_sin_cos (mpfr_ptr y, mpfr_ptr z, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
     }
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("sin[%Pu]=%.*Rg cos[%Pu]=%.*Rg", mpfr_get_prec(y), mpfr_log_prec, y,
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("sin[%Pd]=%.*Rg cos[%Pd]=%.*Rg", mpfr_get_prec(y), mpfr_log_prec, y,
       mpfr_get_prec (z), mpfr_log_prec, z));
 
   MPFR_SAVE_EXPO_MARK (expo);
diff --git a/src/sinh.c b/src/sinh.c
index 6d54ba887..69efdf21c 100644
--- a/src/sinh.c
+++ b/src/sinh.c
@@ -33,8 +33,8 @@ mpfr_sinh (mpfr_ptr y, mpfr_srcptr xt, mpfr_rnd_t rnd_mode)
   int inexact;
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (xt)))
diff --git a/src/sinh_cosh.c b/src/sinh_cosh.c
index d3602cc82..956635561 100644
--- a/src/sinh_cosh.c
+++ b/src/sinh_cosh.c
@@ -37,9 +37,9 @@ mpfr_sinh_cosh (mpfr_ptr sh, mpfr_ptr ch, mpfr_srcptr xt, mpfr_rnd_t rnd_mode)
   MPFR_ASSERTN (sh != ch);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d",
+    (("x[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
-     ("sh[%Pu]=%.*Rg ch[%Pu]=%.*Rg",
+     ("sh[%Pd]=%.*Rg ch[%Pd]=%.*Rg",
       mpfr_get_prec (sh), mpfr_log_prec, sh,
       mpfr_get_prec (ch), mpfr_log_prec, ch));
 
diff --git a/src/sinu.c b/src/sinu.c
index 9e4e1ed01..4c0aa20db 100644
--- a/src/sinu.c
+++ b/src/sinu.c
@@ -43,9 +43,9 @@ mpfr_sinu (mpfr_ptr y, mpfr_srcptr x, unsigned long u, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg u=%lu rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, u,
+    ("x[%Pd]=%.*Rg u=%lu rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, u,
      rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
      inexact));
 
   if (u == 0 || MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/sqr.c b/src/sqr.c
index 74309be6f..195019851 100644
--- a/src/sqr.c
+++ b/src/sqr.c
@@ -516,8 +516,8 @@ mpfr_sqr (mpfr_ptr a, mpfr_srcptr b, mpfr_rnd_t rnd_mode)
   MPFR_TMP_DECL(marker);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (b), mpfr_log_prec, b, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (b), mpfr_log_prec, b, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (a), mpfr_log_prec, a, inexact));
 
   /* deal with special cases */
diff --git a/src/sqrt.c b/src/sqrt.c
index 4252122a0..b6f293b26 100644
--- a/src/sqrt.c
+++ b/src/sqrt.c
@@ -517,8 +517,8 @@ mpfr_sqrt (mpfr_ptr r, mpfr_srcptr u, mpfr_rnd_t rnd_mode)
   MPFR_TMP_DECL(marker);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (u), mpfr_log_prec, u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (u), mpfr_log_prec, u, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (r), mpfr_log_prec, r, inexact));
 
   if (MPFR_UNLIKELY(MPFR_IS_SINGULAR(u)))
diff --git a/src/sqrt_ui.c b/src/sqrt_ui.c
index 318daaa03..18a612f90 100644
--- a/src/sqrt_ui.c
+++ b/src/sqrt_ui.c
@@ -30,7 +30,7 @@ mpfr_sqrt_ui (mpfr_ptr r, unsigned long u, mpfr_rnd_t rnd_mode)
 
   MPFR_LOG_FUNC
     (("u=%lu rnd=%d", u, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec(r), mpfr_log_prec, r, inex));
 
   if (u != 0)
diff --git a/src/strtofr.c b/src/strtofr.c
index a95d242be..ca4d8d21b 100644
--- a/src/strtofr.c
+++ b/src/strtofr.c
@@ -862,7 +862,7 @@ parsed_string_to_mpfr (mpfr_ptr x, struct parsed_string *pstr, mpfr_rnd_t rnd)
           err = 0;
         }
 
-      MPFR_LOG_MSG (("exact = %d, err = %d, precx = %Pu\n",
+      MPFR_LOG_MSG (("exact = %d, err = %d, precx = %Pd\n",
                      exact, err, precx));
 
       /* at this point, result is an approximation rounded toward zero
diff --git a/src/sub.c b/src/sub.c
index c1d47e4e4..10978fc04 100644
--- a/src/sub.c
+++ b/src/sub.c
@@ -26,10 +26,10 @@ MPFR_HOT_FUNCTION_ATTR int
 mpfr_sub (mpfr_ptr a, mpfr_srcptr b, mpfr_srcptr c, mpfr_rnd_t rnd_mode)
 {
   MPFR_LOG_FUNC
-    (("b[%Pu]=%.*Rg c[%Pu]=%.*Rg rnd=%d",
+    (("b[%Pd]=%.*Rg c[%Pd]=%.*Rg rnd=%d",
       mpfr_get_prec (b), mpfr_log_prec, b,
       mpfr_get_prec (c), mpfr_log_prec, c, rnd_mode),
-     ("a[%Pu]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
+     ("a[%Pd]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
 
   if (MPFR_ARE_SINGULAR_OR_UBF (b,c))
     {
diff --git a/src/sub_d.c b/src/sub_d.c
index 29f32502b..2c0c70e56 100644
--- a/src/sub_d.c
+++ b/src/sub_d.c
@@ -32,9 +32,9 @@ mpfr_sub_d (mpfr_ptr a, mpfr_srcptr b, double c, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("b[%Pu]=%.*Rg c=%.20g rnd=%d",
+    (("b[%Pd]=%.*Rg c=%.20g rnd=%d",
       mpfr_get_prec (b), mpfr_log_prec, b, c, rnd_mode),
-     ("a[%Pu]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
+     ("a[%Pd]=%.*Rg", mpfr_get_prec (a), mpfr_log_prec, a));
 
   MPFR_SAVE_EXPO_MARK (expo);
 
diff --git a/src/sub_ui.c b/src/sub_ui.c
index f57c11cdd..4d4c55044 100644
--- a/src/sub_ui.c
+++ b/src/sub_ui.c
@@ -28,9 +28,9 @@ int
 mpfr_sub_ui (mpfr_ptr y, mpfr_srcptr x, unsigned long int u, mpfr_rnd_t rnd_mode)
 {
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg u=%lu rnd=%d",
+    (("x[%Pd]=%.*Rg u=%lu rnd=%d",
       mpfr_get_prec(x), mpfr_log_prec, x, u, rnd_mode),
-     ("y[%Pu]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
+     ("y[%Pd]=%.*Rg", mpfr_get_prec (y), mpfr_log_prec, y));
 
   /* (unsigned long) 0 is assumed to be a real 0 (unsigned) */
   if (MPFR_UNLIKELY (u == 0))
diff --git a/src/sum.c b/src/sum.c
index 86e1fe4fa..38de4c399 100644
--- a/src/sum.c
+++ b/src/sum.c
@@ -543,7 +543,7 @@ sum_aux (mpfr_ptr sum, const mpfr_ptr *x, unsigned long n, mpfr_rnd_t rnd,
   MPFR_LOG_FUNC
     (("n=%lu rnd=%d maxexp=%" MPFR_EXP_FSPEC "d rn=%lu",
       n, rnd, (mpfr_eexp_t) maxexp, rn),
-     ("sum[%Pu]=%.*Rg", mpfr_get_prec (sum), mpfr_log_prec, sum));
+     ("sum[%Pd]=%.*Rg", mpfr_get_prec (sum), mpfr_log_prec, sum));
 
   MPFR_ASSERTD (rn >= 3 && rn <= n);
 
@@ -1268,7 +1268,7 @@ mpfr_sum (mpfr_ptr sum, const mpfr_ptr *x, unsigned long n, mpfr_rnd_t rnd)
 {
   MPFR_LOG_FUNC
     (("n=%lu rnd=%d", n, rnd),
-     ("sum[%Pu]=%.*Rg", mpfr_get_prec (sum), mpfr_log_prec, sum));
+     ("sum[%Pd]=%.*Rg", mpfr_get_prec (sum), mpfr_log_prec, sum));
 
   if (MPFR_UNLIKELY (n <= 2))
     {
diff --git a/src/tan.c b/src/tan.c
index 79f1ad3b3..674c57e64 100644
--- a/src/tan.c
+++ b/src/tan.c
@@ -35,8 +35,8 @@ mpfr_tan (mpfr_ptr y, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
   MPFR_GROUP_DECL (group);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   if (MPFR_UNLIKELY(MPFR_IS_SINGULAR(x)))
diff --git a/src/tanh.c b/src/tanh.c
index 50ec630ac..32cb72c70 100644
--- a/src/tanh.c
+++ b/src/tanh.c
@@ -32,8 +32,8 @@ mpfr_tanh (mpfr_ptr y, mpfr_srcptr xt, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("x[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
-     ("y[%Pu]=%.*Rg inexact=%d",
+    (("x[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (xt), mpfr_log_prec, xt, rnd_mode),
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (y), mpfr_log_prec, y, inexact));
 
   /* Special value checking */
diff --git a/src/tanu.c b/src/tanu.c
index a53bb26b1..330d5bcb4 100644
--- a/src/tanu.c
+++ b/src/tanu.c
@@ -37,9 +37,9 @@ mpfr_tanu (mpfr_ptr y, mpfr_srcptr x, unsigned long u, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("x[%Pu]=%.*Rg u=%lu rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, u,
+    ("x[%Pd]=%.*Rg u=%lu rnd=%d", mpfr_get_prec (x), mpfr_log_prec, x, u,
      rnd_mode),
-    ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
+    ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (y), mpfr_log_prec, y,
      inexact));
 
   if (u == 0 || MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
diff --git a/src/ubf.c b/src/ubf.c
index b2da806d1..2eac900d3 100644
--- a/src/ubf.c
+++ b/src/ubf.c
@@ -74,10 +74,10 @@ void
 mpfr_ubf_mul_exact (mpfr_ubf_ptr a, mpfr_srcptr b, mpfr_srcptr c)
 {
   MPFR_LOG_FUNC
-    (("b[%Pu]=%.*Rg c[%Pu]=%.*Rg",
+    (("b[%Pd]=%.*Rg c[%Pd]=%.*Rg",
       mpfr_get_prec (b), mpfr_log_prec, b,
       mpfr_get_prec (c), mpfr_log_prec, c),
-     ("a[%Pu]=%.*Rg",
+     ("a[%Pd]=%.*Rg",
       mpfr_get_prec ((mpfr_ptr) a), mpfr_log_prec, a));
 
   MPFR_ASSERTD ((mpfr_ptr) a != b);
diff --git a/src/ui_div.c b/src/ui_div.c
index 3a6339ca7..4a2601b9a 100644
--- a/src/ui_div.c
+++ b/src/ui_div.c
@@ -28,9 +28,9 @@ int
 mpfr_ui_div (mpfr_ptr y, unsigned long int u, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
 {
   MPFR_LOG_FUNC
-    (("u=%lu x[%Pu]=%.*Rg rnd=%d",
+    (("u=%lu x[%Pd]=%.*Rg rnd=%d",
       u, mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg", mpfr_get_prec(y), mpfr_log_prec, y));
+     ("y[%Pd]=%.*Rg", mpfr_get_prec(y), mpfr_log_prec, y));
 
   if (MPFR_UNLIKELY(MPFR_IS_SINGULAR(x)))
     {
diff --git a/src/ui_pow_ui.c b/src/ui_pow_ui.c
index 925119aad..fc953c382 100644
--- a/src/ui_pow_ui.c
+++ b/src/ui_pow_ui.c
@@ -37,7 +37,7 @@ mpfr_ui_pow_ui (mpfr_ptr x, unsigned long int k, unsigned long int n,
 
   MPFR_LOG_FUNC
     (("k=%lu n=%lu rnd=%d", k, n, rnd),
-     ("y[%Pu]=%.*Rg inexact=%d",
+     ("y[%Pd]=%.*Rg inexact=%d",
       mpfr_get_prec (x), mpfr_log_prec, x, inexact));
 
   if (MPFR_UNLIKELY (n <= 1))
diff --git a/src/ui_sub.c b/src/ui_sub.c
index 512eb8a67..06b7db27b 100644
--- a/src/ui_sub.c
+++ b/src/ui_sub.c
@@ -27,9 +27,9 @@ int
 mpfr_ui_sub (mpfr_ptr y, unsigned long int u, mpfr_srcptr x, mpfr_rnd_t rnd_mode)
 {
   MPFR_LOG_FUNC
-    (("u=%lu x[%Pu]=%.*Rg rnd=%d",
+    (("u=%lu x[%Pd]=%.*Rg rnd=%d",
       u, mpfr_get_prec(x), mpfr_log_prec, x, rnd_mode),
-     ("y[%Pu]=%.*Rg", mpfr_get_prec(y), mpfr_log_prec, y));
+     ("y[%Pd]=%.*Rg", mpfr_get_prec(y), mpfr_log_prec, y));
 
   /* (unsigned long) 0 is assumed to be a real 0 (unsigned) */
   if (MPFR_UNLIKELY (u == 0))
diff --git a/src/yn.c b/src/yn.c
index c4d486681..e33b3a8c5 100644
--- a/src/yn.c
+++ b/src/yn.c
@@ -154,8 +154,8 @@ mpfr_yn (mpfr_ptr res, long n, mpfr_srcptr z, mpfr_rnd_t r)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC
-    (("n=%ld x[%Pu]=%.*Rg rnd=%d", n, mpfr_get_prec (z), mpfr_log_prec, z, r),
-     ("y[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (res), mpfr_log_prec, res, inex));
+    (("n=%ld x[%Pd]=%.*Rg rnd=%d", n, mpfr_get_prec (z), mpfr_log_prec, z, r),
+     ("y[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (res), mpfr_log_prec, res, inex));
 
   absn = SAFE_ABS (unsigned long, n);
 
diff --git a/src/zeta.c b/src/zeta.c
index 18c7e179f..e66ff908b 100644
--- a/src/zeta.c
+++ b/src/zeta.c
@@ -447,8 +447,8 @@ mpfr_zeta (mpfr_ptr z, mpfr_srcptr s, mpfr_rnd_t rnd_mode)
   MPFR_SAVE_EXPO_DECL (expo);
 
   MPFR_LOG_FUNC (
-    ("s[%Pu]=%.*Rg rnd=%d", mpfr_get_prec (s), mpfr_log_prec, s, rnd_mode),
-    ("z[%Pu]=%.*Rg inexact=%d", mpfr_get_prec (z), mpfr_log_prec, z, inex));
+    ("s[%Pd]=%.*Rg rnd=%d", mpfr_get_prec (s), mpfr_log_prec, s, rnd_mode),
+    ("z[%Pd]=%.*Rg inexact=%d", mpfr_get_prec (z), mpfr_log_prec, z, inex));
 
   /* Zero, Nan or Inf ? */
   if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (s)))
diff --git a/src/zeta_ui.c b/src/zeta_ui.c
index dcbb49f2d..a2b3b6cd0 100644
--- a/src/zeta_ui.c
+++ b/src/zeta_ui.c
@@ -29,8 +29,8 @@ mpfr_zeta_ui (mpfr_ptr z, unsigned long m, mpfr_rnd_t r)
   MPFR_ZIV_DECL (loop);
 
   MPFR_LOG_FUNC
-    (("m=%lu rnd=%d prec=%Pu", m, r, mpfr_get_prec (z)),
-     ("z[%Pu]=%.*Rg", mpfr_get_prec (z), mpfr_log_prec, z));
+    (("m=%lu rnd=%d prec=%Pd", m, r, mpfr_get_prec (z)),
+     ("z[%Pd]=%.*Rg", mpfr_get_prec (z), mpfr_log_prec, z));
 
   if (m == 0) /* zeta(0) = -1/2 */
     return mpfr_set_si_2exp (z, -1, -1, r);
diff --git a/tests/tlog.c b/tests/tlog.c
index 44b8b3be1..c53aa93f5 100644
--- a/tests/tlog.c
+++ b/tests/tlog.c
@@ -176,6 +176,7 @@ special (void)
   mpfr_t x, y;
   int inex;
   mpfr_exp_t emin, emax;
+  int r;
 
   emin = mpfr_get_emin ();
   emax = mpfr_get_emax ();
@@ -238,6 +239,18 @@ special (void)
   MPFR_ASSERTN (mpfr_inf_p (y));
   MPFR_ASSERTN (mpfr_sgn (y) < 0);
 
+  /* check log(1) is +0 whatever the rounding mode */
+  mpfr_set_ui (x, 1, MPFR_RNDN);
+  RND_LOOP (r)
+    {
+      mpfr_clear_flags ();
+      inex = test_log (y, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (__gmpfr_flags == 0);
+      MPFR_ASSERTN (inex == 0);
+      MPFR_ASSERTN (MPFR_IS_ZERO (y));
+      MPFR_ASSERTN (MPFR_IS_POS (y));
+    }
+
   mpfr_clear (x);
   mpfr_clear (y);
 }
diff --git a/tests/tlog10.c b/tests/tlog10.c
index b21dd59aa..0f21ec8a3 100644
--- a/tests/tlog10.c
+++ b/tests/tlog10.c
@@ -108,7 +108,7 @@ main (int argc, char *argv[])
 {
   mpfr_t x, y;
   unsigned int n;
-  int inex;
+  int inex, r;
 
   tests_start_mpfr ();
 
@@ -117,50 +117,53 @@ main (int argc, char *argv[])
   mpfr_init2 (x, 53);
   mpfr_init2 (y, 53);
 
-  /* check NaN */
-  mpfr_set_nan (x);
-  inex = test_log10 (y, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_nan_p (y) && inex == 0);
-
-  /* check Inf */
-  mpfr_set_inf (x, -1);
-  inex = test_log10 (y, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_nan_p (y) && inex == 0);
-
-  mpfr_set_inf (x, 1);
-  inex = test_log10 (y, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_inf_p (y) && mpfr_sgn (y) > 0 && inex == 0);
-
-  mpfr_set_ui (x, 0, MPFR_RNDN);
-  inex = test_log10 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) < 0 && inex == 0);
-  mpfr_set_ui (x, 0, MPFR_RNDN);
-  mpfr_neg (x, x, MPFR_RNDN);
-  inex = test_log10 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) < 0 && inex == 0);
-
-  /* check negative argument */
-  mpfr_set_si (x, -1, MPFR_RNDN);
-  inex = test_log10 (y, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_nan_p (y) && inex == 0);
-
-  /* check log10(1) = 0 */
-  mpfr_set_ui (x, 1, MPFR_RNDN);
-  inex = test_log10 (y, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_cmp_ui (y, 0) == 0 && MPFR_IS_POS (y) && inex == 0);
-
-  /* check log10(10^n)=n */
-  mpfr_set_ui (x, 1, MPFR_RNDN);
-  for (n = 1; n <= 15; n++)
+  RND_LOOP (r)
     {
-      mpfr_mul_ui (x, x, 10, MPFR_RNDN); /* x = 10^n */
-      inex = test_log10 (y, x, MPFR_RNDN);
-      if (mpfr_cmp_ui (y, n))
+      /* check NaN */
+      mpfr_set_nan (x);
+      inex = test_log10 (y, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_nan_p (y) && inex == 0);
+
+      /* check Inf */
+      mpfr_set_inf (x, -1);
+      inex = test_log10 (y, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_nan_p (y) && inex == 0);
+
+      mpfr_set_inf (x, 1);
+      inex = test_log10 (y, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_inf_p (y) && mpfr_sgn (y) > 0 && inex == 0);
+
+      mpfr_set_ui (x, 0, MPFR_RNDN);
+      inex = test_log10 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) < 0 && inex == 0);
+      mpfr_set_ui (x, 0, MPFR_RNDN);
+      mpfr_neg (x, x, MPFR_RNDN);
+      inex = test_log10 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) < 0 && inex == 0);
+
+      /* check negative argument */
+      mpfr_set_si (x, -1, MPFR_RNDN);
+      inex = test_log10 (y, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_nan_p (y) && inex == 0);
+
+      /* check log10(1) = 0 */
+      mpfr_set_ui (x, 1, MPFR_RNDN);
+      inex = test_log10 (y, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (MPFR_IS_ZERO (y) && MPFR_IS_POS (y) && inex == 0);
+
+      /* check log10(10^n)=n */
+      mpfr_set_ui (x, 1, MPFR_RNDN);
+      for (n = 1; n <= 15; n++)
         {
-          printf ("log10(10^n) <> n for n=%u\n", n);
-          exit (1);
+          mpfr_mul_ui (x, x, 10, MPFR_RNDN); /* x = 10^n */
+          inex = test_log10 (y, x, (mpfr_rnd_t) r);
+          if (mpfr_cmp_ui (y, n))
+            {
+              printf ("log10(10^n) <> n for n=%u\n", n);
+              exit (1);
+            }
+          MPFR_ASSERTN (inex == 0);
         }
-      MPFR_ASSERTN (inex == 0);
     }
 
   mpfr_clear (x);
diff --git a/tests/tlog2.c b/tests/tlog2.c
index aa48f6f27..04e5e487a 100644
--- a/tests/tlog2.c
+++ b/tests/tlog2.c
@@ -30,37 +30,40 @@ static void
 special (void)
 {
   mpfr_t x;
-  int inex;
+  int inex, r;
 
   mpfr_init (x);
 
-  mpfr_set_nan (x);
-  inex = mpfr_log2 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_nan_p (x) && inex == 0);
-
-  mpfr_set_inf (x, -1);
-  inex = mpfr_log2 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_nan_p (x) && inex == 0);
-
-  mpfr_set_inf (x, 1);
-  inex = mpfr_log2 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) > 0 && inex == 0);
-
-  mpfr_set_ui (x, 0, MPFR_RNDN);
-  inex = mpfr_log2 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) < 0 && inex == 0);
-  mpfr_set_ui (x, 0, MPFR_RNDN);
-  mpfr_neg (x, x, MPFR_RNDN);
-  inex = mpfr_log2 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) < 0 && inex == 0);
-
-  mpfr_set_si (x, -1, MPFR_RNDN);
-  inex = mpfr_log2 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_nan_p (x) && inex == 0);
-
-  mpfr_set_si (x, 1, MPFR_RNDN);
-  inex = mpfr_log2 (x, x, MPFR_RNDN);
-  MPFR_ASSERTN (mpfr_cmp_ui (x, 0) == 0 && MPFR_IS_POS(x) && inex == 0);
+  RND_LOOP (r)
+    {
+      mpfr_set_nan (x);
+      inex = mpfr_log2 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_nan_p (x) && inex == 0);
+
+      mpfr_set_inf (x, -1);
+      inex = mpfr_log2 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_nan_p (x) && inex == 0);
+
+      mpfr_set_inf (x, 1);
+      inex = mpfr_log2 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) > 0 && inex == 0);
+
+      mpfr_set_ui (x, 0, MPFR_RNDN);
+      inex = mpfr_log2 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) < 0 && inex == 0);
+      mpfr_set_ui (x, 0, MPFR_RNDN);
+      mpfr_neg (x, x, MPFR_RNDN);
+      inex = mpfr_log2 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_inf_p (x) && mpfr_sgn (x) < 0 && inex == 0);
+
+      mpfr_set_si (x, -1, MPFR_RNDN);
+      inex = mpfr_log2 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (mpfr_nan_p (x) && inex == 0);
+
+      mpfr_set_si (x, 1, MPFR_RNDN);
+      inex = mpfr_log2 (x, x, (mpfr_rnd_t) r);
+      MPFR_ASSERTN (MPFR_IS_ZERO (x) && MPFR_IS_POS (x) && inex == 0);
+    }
 
   mpfr_clear (x);
 }
