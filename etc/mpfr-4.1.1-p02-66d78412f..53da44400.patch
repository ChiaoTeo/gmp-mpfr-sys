diff --git a/Makefile.am b/Makefile.am
index bef006fd7..32dc40b67 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -44,11 +44,12 @@ nobase_dist_doc_DATA = AUTHORS BUGS COPYING COPYING.LESSER NEWS TODO \
   examples/rndo-add.c examples/sample.c examples/threads.c \
   examples/version.c
 
-# Note: Even though tarballs do not normally contain a .git directory,
-# we need to distribute version-ext.sh to avoid a failure in case a
-# tarball is tested from a Git directory (this script is executed by
-# tests/Makefile.am in case of a Git working tree), which happens with
-# "make distcheck", for instance.
+# Note: The version-ext.sh script is normally no longer needed because
+# the output_info code in tests/Makefile.am now executes this script
+# only if $(top_srcdir)/.git exists and is readable, but this should
+# not occur in a tarball (built based on EXTRA_DIST), unless someone
+# has modified it for some reason. But since this script is small, we
+# distribute it just in case it would be used.
 EXTRA_DIST = PATCHES VERSION doc/README.dev doc/check-typography doc/mini-gmp \
   tools/check_mparam.c tools/ck-clz_tab tools/ck-copyright-notice \
   tools/ck-mparam tools/ck-news tools/ck-version-info tools/get_patches.sh \
diff --git a/doc/README.dev b/doc/README.dev
index 2ee7d9663..5a8f85ca5 100644
--- a/doc/README.dev
+++ b/doc/README.dev
@@ -371,7 +371,7 @@ To make a release (for the MPFR team):
 
      Check that there are no abnormal regressions in the timings (both for
      100, 1000, 10000 digits, https://www.mpfr.org/mpfr-current/timings.html,
-     and for small precision, using the mbench program, see mpfr/mbench).
+     and for small precision, using the mbench program, see tools/mbench).
 
      Test the library interface compatibility by running the test suite
      compiled against an old library version and dynamically linked with
diff --git a/doc/mpfr.texi b/doc/mpfr.texi
index 4676fbbb9..9b4868783 100644
--- a/doc/mpfr.texi
+++ b/doc/mpfr.texi
@@ -2110,7 +2110,7 @@ Set @var{rop} to the factorial of @var{op}, rounded in the direction @var{rnd}.
 @deftypefun int mpfr_fma (mpfr_t @var{rop}, mpfr_t @var{op1}, mpfr_t @var{op2}, mpfr_t @var{op3}, mpfr_rnd_t @var{rnd})
 @deftypefunx int mpfr_fms (mpfr_t @var{rop}, mpfr_t @var{op1}, mpfr_t @var{op2}, mpfr_t @var{op3}, mpfr_rnd_t @var{rnd})
 Set @var{rop} to @tm{(@var{op1} @GMPtimes{} @var{op2}) + @var{op3}}
-(resp.@: @tm{(@var{op1} @GMPtimes{} @var{op2}) - @var{op3}})
+(resp.@: @tm{(@var{op1} @GMPtimes{} @var{op2}) @minus{} @var{op3}})
 rounded in the direction @var{rnd}.  Concerning special values (signed zeros,
 infinities, NaN), these functions behave like a multiplication followed by a
 separate addition or subtraction.  That is, the fused operation matters only
@@ -2438,7 +2438,7 @@ standards for the @code{atan2} function:
 @item @code{atan2(@var{y}, 0)} returns @m{-\pi/2,@minus{}Pi/2} for @tm{@var{y} < 0}.
 @item @code{atan2(@var{y}, 0)} returns @m{+\pi/2,+Pi/2} for @tm{@var{y} > 0}.
 @item @code{atan2(+Inf, -Inf)} returns @m{+3\pi/4,+3*Pi/4}.
-@item @code{atan2(-Inf, -Inf)} returns @m{-3\pi/4,-3*Pi/4}.
+@item @code{atan2(-Inf, -Inf)} returns @m{-3\pi/4,@minus{}3*Pi/4}.
 @item @code{atan2(+Inf, +Inf)} returns @m{+\pi/4,+Pi/4}.
 @item @code{atan2(-Inf, +Inf)} returns @m{-\pi/4,@minus{}Pi/4}.
 @item @code{atan2(+Inf, @var{x})} returns @m{+\pi/2,+Pi/2} for finite @tm{@var{x}}.
@@ -2498,8 +2498,8 @@ at @minus{}@var{op} (formula 5.1.1 from the same reference).
 @deftypefun int mpfr_li2 (mpfr_t @var{rop}, mpfr_t @var{op}, mpfr_rnd_t @var{rnd})
 Set @var{rop} to real part of the dilogarithm of @var{op}, rounded in the
 direction @var{rnd}. MPFR defines the dilogarithm function as
-@m{-\int_{t=0}^{@var{op}} \log(1-t)/t\ dt,the integral of -log(1-t)/t from 0
-to @var{op}}.
+@m{-\int_{t=0}^{@var{op}} \log(1-t)/t\ dt,the integral of
+@minus{}log(1@minus{}t)/t from 0 to @var{op}}.
 @end deftypefun
 
 @deftypefun int mpfr_gamma (mpfr_t @var{rop}, mpfr_t @var{op}, mpfr_rnd_t @var{rnd})
@@ -3567,9 +3567,9 @@ Return the (current) smallest and largest exponents allowed for a
 floating-point variable. The smallest positive value of a floating-point
 variable is @m{1/2 \times 2^{@var{emin}}, one half times 2 raised to the
 smallest exponent} and the largest value has the form @m{(1 - \varepsilon)
-\times 2^{@var{emax}}, (1 - epsilon) times 2 raised to the largest exponent},
-where @m{\varepsilon,epsilon} depends on the precision of the considered
-variable.
+\times 2^{@var{emax}}, (1 @minus{} epsilon) times 2 raised to the largest
+exponent}, where @m{\varepsilon,epsilon} depends on the precision of the
+considered variable.
 @end deftypefun
 
 @deftypefun int mpfr_set_emin (mpfr_exp_t @var{exp})
diff --git a/tests/Makefile.am b/tests/Makefile.am
index 229ad704d..2f7172d2d 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -18,20 +18,18 @@
 
 AUTOMAKE_OPTIONS = 1.6 gnu
 
-# For Git, output dash-separated information:
-#   * the detected branch;
-#   * the total commit count;
-#   * the commit id (hash).
-# Note: for the branch detection, in the case of a detached HEAD state,
-# the commit may appear in multiple branches, i.e. which diverge after
-# the commit; thus we exclude branches created after this commit, based
-# on <branch>-root tags (such a tag should be added by the user when
-# creating a branch, so that "git diff <branch>-root" shows commits done
-# in the branch since its creation, etc.). If $gitb contains multiple
-# branches, this means that something is probably wrong with the tags
-# or the branches (merged branches should be deleted).
-# Concerning the test "git rev-parse ...", if git is not installed, this
-# test should silently fail.
+# For Git:
+#   * To avoid escaping the MPFR source tree, we check whether
+#     $(top_srcdir)/.git is readable (note that this is not
+#     necessarily a directory: in case of a "linked worktree",
+#     this is a file; see the git-worktree(1) man page).
+#     In particular, if one extracts an MPFR tarball within a
+#     Git working tree (e.g. after "make dist"), then running
+#     "make check" in this extracted source tree will work as
+#     expected, giving correct version information.
+#   * Additional test with "git rev-parse ...", which should
+#     silently fail if git is not installed.
+#   * See version-ext.sh for information on its output.
 output_info = { \
   if [ -d $(top_srcdir)/.svn ]; then \
     output=`svnversion $(top_srcdir) 2> /dev/null`; \
@@ -39,7 +37,8 @@ output_info = { \
       echo "[svnversion] $$output"; \
     fi; \
   fi; \
-  if [ "x`git rev-parse --is-inside-work-tree 2> /dev/null`" = xtrue ]; then \
+  if [ -r $(top_srcdir)/.git ] && \
+     [ "x`git rev-parse --is-inside-work-tree 2> /dev/null`" = xtrue ]; then \
     gitv=`GREP=$(GREP) SED=$(SED) $(top_srcdir)/version-ext.sh`; \
     echo "[git] $$gitv"; \
   fi; \
diff --git a/tests/mpfr-test.h b/tests/mpfr-test.h
index dc3dffa2d..b9fbdf1c1 100644
--- a/tests/mpfr-test.h
+++ b/tests/mpfr-test.h
@@ -103,8 +103,9 @@ https://www.gnu.org/licenses/ or write to the Free Software Foundation, Inc.,
    However, at least when the function is not implemented as a macro (which
    is the case when MPFR_USE_NO_MACRO is defined), such tests with void *
    arguments are not valid in C++; therefore, we will not do the cast to
-   void * if the __cplusplus macro is defined. And with GCC compilers (and
-   compatible), we will ignore the -Wc++-compat option around these tests.
+   void * if the __cplusplus macro is defined. And with GCC 4.6+ compilers
+   (and compatible), we will ignore the -Wc++-compat option around these
+   tests.
 
    Note: in the future, inline functions could be used instead of macros,
    and such tests would become useless (except to detect compiler bugs).
@@ -113,7 +114,12 @@ https://www.gnu.org/licenses/ or write to the Free Software Foundation, Inc.,
 #define VOIDP_CAST(X) (X)
 #else
 #define VOIDP_CAST(X) ((void *) (X))
-#if defined (__GNUC__)
+/* Define IGNORE_CPP_COMPAT only for the GCC and Clang versions that
+   support it.
+   Note: GCC versions < 4.6 do not allow "#pragma GCC diagnostic" inside
+   functions, and Clang on Windows (clang-cl) does not define __GNUC__.
+   See https://sympa.inria.fr/sympa/arc/mpfr/2022-12/msg00007.html */
+#if __MPFR_GNUC(4,6) || defined (__clang__)
 #define IGNORE_CPP_COMPAT
 #endif
 #endif
diff --git a/version-ext.sh b/version-ext.sh
index 936092123..9bcc12989 100755
--- a/version-ext.sh
+++ b/version-ext.sh
@@ -4,7 +4,8 @@
 # Git working tree (Git branch or "(none)", total commit count,
 # commit id, and whether the current HEAD is modified). It is
 # called in tests/Makefile.am for "make check", but may be used
-# by other tools that need such information.
+# by other tools that need such information (other tests may be
+# needed; see tests/Makefile.am as an example of use).
 # Note that this does not replace version information found in
 # the VERSION file, which may still need to be output in addition
 # to the output of this script.
@@ -20,6 +21,15 @@ fi
 GREP=${GREP:-grep}
 SED=${SED:-sed}
 
+# Note: for the branch detection, in the case of a detached HEAD state,
+# the commit may appear in multiple branches, i.e. which diverge after
+# the commit; thus we exclude branches created after this commit, based
+# on <branch>-root tags (such a tag should be added by the user when
+# creating a branch, so that "git diff <branch>-root" shows commits done
+# in the branch since its creation, etc.). If $gitb contains multiple
+# branches, this means that something is probably wrong with the tags
+# or the branches (merged branches should be deleted).
+
 git tag --contains | $SED -n 's/-root$//p' > excluded-branches
 gitb=`git branch --format='%(refname:short)' --contains | \
         $SED 's,(HEAD detached at origin/\(.*\)),\1,' | \
